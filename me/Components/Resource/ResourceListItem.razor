@using Syncfusion.Blazor.Buttons
@using System.Text

@if (Item is not null)
{
    <div class="e-list-wrapper e-list-multi-line e-list-avatar">
        <span class="e-avatar e-avatar-circle">@(Item.ProviderId)</span>
        <span class="e-list-item-header e-list-multi-line" style="word-wrap: break-word;">
            @if (Item.Url.StartsWith("http"))
            {
                <a href="@Item.Url" target="_blank">@GetResourceHeader(Item)</a>
            }
            else
            {
                @GetResourceHeader(Item)
            }
        </span>
        <span class="e-list-content" style="word-wrap: break-word;">
            <SfChip>
                <ChipItems>
                    <ChipItem CssClass="e-outline" Text="@Item.Provider.Title"></ChipItem>
                    <ChipItem CssClass="e-outline" Text="@($"{Item.Experience.ToString("N2")} xp")">
                    </ChipItem>
                    <ChipItem CssClass="e-outline" Text="@GetLevelString(Item.Level)"></ChipItem>
                    <ChipItem CssClass="e-outline" Text="@GetDurationString(Item.Duration)"></ChipItem>
                    <ChipItem Text="@Item.Type.Title"
                              CssClass="@($"e-outline{(Item.Type.IsHighlighted ? " e-primary" : "")}")"></ChipItem>
                </ChipItems>
            </SfChip>
            <SfChip>
                <ChipEvents OnClick="@OnClick"></ChipEvents>
                <ChipItems>
                    @foreach (var tag in Item.ResourceTags.Select(rt => rt.Tag).OrderByDescending(t =>
                    t.WeightedExperience))
                    {
                        <ChipItem Text="@tag.Title" CssClass="@(tag.IsHighlighted ? "e-primary" : "")">
                        </ChipItem>
                    }
                </ChipItems>
            </SfChip>
        </span>
    </div>
}

@code {

    [Parameter] public Resource? Item { get; set; }
    [Parameter] public EventCallback<Resource> ItemChanged { get; set; }
    [Parameter] public EventCallback<SelectableBase> Update { get; set; }

    private IEnumerable<Tag>? Tags => Item?.ResourceTags?.Select(rt => rt.Tag);

    private string GetResourceHeader(Resource resource)
    {
        return $"{resource.Title}";
    }

    private string GetDurationString(TimeSpan duration)
    {
        var stringBuilder = new StringBuilder();

        if (duration.TotalHours >= 1)
        {
            stringBuilder.Append($"{((int)duration.TotalHours)}h ");
        }
        if (duration.Minutes > 0)
        {
            stringBuilder.Append($"{duration.Minutes}m");
        }

        return stringBuilder.ToString();
    }

    private string GetLevelString(int level)
    {
        switch (level)
        {
            case 100:
                return "Beginner";
            case 200:
                return "Intermediate";
            case 300:
                return "Advanced";
            default:
                return "Unknown";
        }
    }

    private async Task OnClick(ChipEventArgs args)
    {
        var tag = Item!.ResourceTags.FirstOrDefault(t => t.Tag.Title == args.Text)?.Tag;

        if (tag != null)
        {
            tag.IsSelected = !tag.IsSelected;
            await ItemChanged.InvokeAsync(Item);
            await Update.InvokeAsync(tag);
        }
    }
}