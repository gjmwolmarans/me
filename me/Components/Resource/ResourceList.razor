@using System.Collections.ObjectModel
@using System.Text
@using me.shared
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Lists
@using Syncfusion.Blazor.Buttons

@inject IExcelFileService Data;

@if (Items.Any())
{
    <h3>Resources</h3>
    <SfListView DataSource="@Items.OrderByDescending(x => x.Id)"
        CssClass="e-list-template"
        SortOrder="Syncfusion.Blazor.Lists.SortOrder.Ascending">
        <ListViewFieldSettings TValue="Resource" Id="@nameof(Resource.Id)" Text="@nameof(Resource.Title)">
        </ListViewFieldSettings>
        <ListViewTemplates TValue="Resource">
            <Template>
                @{
                    var resource = (context as Resource)!;

                    <div class="e-list-wrapper e-list-multi-line e-list-avatar">
                        <span class="e-avatar e-avatar-circle">@(resource.ProviderId)</span>
                        <span class="e-list-item-header" style="word-wrap: break-word;">
                            @if (resource.Url.StartsWith("http"))
                            {
                                <a href="@resource.Url" target="_blank">@GetResourceHeader(resource)</a>
                            } 
                            else
                            {
                                @GetResourceHeader(resource);
                            }
                        </span>
                        <span class="e-list-content" style="word-wrap: break-word;">
                            <SfChip>
                                <ChipItems>
                                    <ChipItem Text="@($"{resource.Experience.ToString("N2")} xp")"></ChipItem>
                                    <ChipItem Text="@GetLevelString(resource.Level)"></ChipItem>
                                    <ChipItem Text="@GetDurationString(resource.Duration)"></ChipItem>
                                    <ChipItem Text="@resource.Type"></ChipItem>
                                </ChipItems>
                            </SfChip>
                            <SfChip>
                                <ChipItems>
                                    @foreach (var resourceTag in resource.ResourceTags)
                                    {
                                        <ChipItem Text="@resourceTag.Tag.Title"></ChipItem>
                                    }
                                </ChipItems>
                            </SfChip>
                        </span>
                    </div>
                }
            </Template>
        </ListViewTemplates>
    </SfListView>
}

@code {
    [Parameter] public IEnumerable<Resource> Items { get; set; } = Enumerable.Empty<Resource>();

    public string ProviderTitleValue = string.Empty;
    public string TitleValue = string.Empty;
    public string TypeValue = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

    }

    private string GetDurationString(TimeSpan duration)
    {
        var stringBuilder = new StringBuilder();

        if (duration.TotalHours >= 1)
        {
            stringBuilder.Append($"{((int)duration.TotalHours)}h ");
        }
        if (duration.Minutes > 0)
        {
            stringBuilder.Append($"{duration.Minutes}m");
        }

        return stringBuilder.ToString();
    }

    private string GetLevelString(int level)
    {
        switch (level)
        {
            case 100:
                return "Beginner";
            case 200:
                return "Intermediate";
            case 300:
                return "Advanced";
            default:
                return "Unknown";
        }
    }

    private string GetResourceHeader(Resource resource)
    {
        return $"{resource.Provider.Title} | {resource.Title}";
    }
}
