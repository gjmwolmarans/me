@using System.Collections.ObjectModel
@using System.Text
@using me.shared
@using Syncfusion.Blazor.Grids

@inject IExcelFileService Data;

<h1>Resources</h1>

@if (Resources != null)
{
    <SfGrid DataSource="@Resources" AllowPaging=true AllowSorting=true AllowMultiSorting=true AllowFiltering=true >
        <GridFilterSettings>
            <GridFilterColumns>
                <GridFilterColumn Field="@(nameof(Resource.Provider) + "." + nameof(Provider.Title))" 
                                  Operator="Syncfusion.Blazor.Operator.Contains"
                                  Predicate="and"
                                  Value="@ProviderTitleValue" />
                <GridFilterColumn Field=@nameof(Resource.Title)
                                  Operator="Syncfusion.Blazor.Operator.Contains"
                                  Predicate="and"
                                  Value="@TitleValue" />
                <GridFilterColumn Field=@nameof(Resource.Type)
                                  Operator="Syncfusion.Blazor.Operator.Contains"
                                  Predicate="and"
                                  Value="@TypeValue" />
            </GridFilterColumns>
        </GridFilterSettings>
        <GridSortSettings>
            <GridSortColumns>
                <GridSortColumn Field=@nameof(Resource.Id) Direction="@Syncfusion.Blazor.Grids.SortDirection.Descending" />
            </GridSortColumns>
        </GridSortSettings>
        <GridPageSettings PageSize="10"></GridPageSettings>
        <GridTemplates>
            <RowTemplate>
                @{
                    var resource = (context as Resource)!;
                    <td colspan="7" style="width: 100%;">
                        <FluentGrid Style="padding: 0.5rem; width: auto;" Justify="@JustifyContent.FlexStart">
                            <FluentGridItem xs="4" sm="3" lg="2" Justify="@JustifyContent.Center">
                                <FluentPersona Initials="@resource.ProviderId" ImageSize="96px"/>
                            </FluentGridItem>
                            <FluentGridItem xs="8" sm="9" lg="10">
                                <FluentStack Orientation="Orientation.Vertical">
                                    <FluentStack Orientation="Orientation.Horizontal">
                                        <h2>@resource.Provider.Title | @resource.Title @if (resource.Url.StartsWith("http")) { 
                                            
                                            <a href="@resource.Url" target="_blank">
                                                <FluentIcon Value="@(new Icons.Regular.Size28.Link())" />
                                            </a>
                                        }</h2>
                                    </FluentStack>
                                    <FluentStack Orientation="Orientation.Horizontal">
                                        <FluentBadge Appearance="Appearance.Accent">
                                            @resource.Experience.ToString("N2") xp
                                        </FluentBadge>
                                        <FluentBadge Appearance="Appearance.Accent">
                                            @GetLevelString(resource.Level)
                                        </FluentBadge>
                                        <FluentBadge Appearance="Appearance.Accent">
                                            @GetDurationString(resource.Duration)
                                        </FluentBadge>
                                        <FluentBadge Appearance="Appearance.Accent">
                                            @resource.Type
                                        </FluentBadge>
                                    </FluentStack>
                                    <FluentStack Orientation="Orientation.Horizontal">
                                        @foreach (var resourceTag in resource.ResourceTags)
                                        {
                                            <FluentBadge>
                                                @resourceTag.Tag.Title
                                            </FluentBadge>
                                        }
                                    </FluentStack>
                                </FluentStack>
                            </FluentGridItem>
                        </FluentGrid>
                    </td>
                }
            </RowTemplate>
        </GridTemplates>
        <GridColumns>
            <GridColumn Field="@nameof(Resource.Id)" AllowFiltering=false IsPrimaryKey=true HeaderText="ID" TextAlign=TextAlign.Right Width=72 />
            <GridColumn Field="@(nameof(Resource.Provider) + "." + nameof(Provider.Title))" HeaderText="Provider" />
            <GridColumn Field="@nameof(Resource.Title)" HeaderText="Title" />
            <GridColumn Field="@nameof(Resource.Type)" HeaderText="Type" />
            <GridColumn Field="@nameof(Resource.Experience)" AllowFiltering=false HeaderText="Experience" Type=ColumnType.Double Format="N2" />
            <GridColumn Field="@nameof(Resource.Level)" AllowFiltering=false HeaderText="Level" Type=ColumnType.Integer />
            <GridColumn Field="@nameof(Resource.Duration)" AllowFiltering=false HeaderText="Duration" />
        </GridColumns>
    </SfGrid>
}

@code {
    [Parameter] public ICollection<Resource> Resources { get; set; } = new List<Resource>();
    [Parameter] public EventCallback<ICollection<Resource>> ResourcesChanged { get; set; }

    public string ProviderTitleValue = string.Empty;
    public string TitleValue = string.Empty;
    public string TypeValue = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Resources = await Data.GetResourcesAsync();
    }

    private string GetDurationString(TimeSpan duration)
    {
        var stringBuilder = new StringBuilder();

        if (duration.TotalHours >= 1)
        {
            stringBuilder.Append($"{((int)duration.TotalHours)}h ");
        }
        if (duration.Minutes > 0)
        {
            stringBuilder.Append($"{duration.Minutes}m");
        }

        return stringBuilder.ToString();
    }

    private string GetLevelString(int level)
    {
        switch (level) 
        {
            case 100:
                return "Beginner";
            case 200:
                return "Intermediate";
            case 300:
                return "Advanced";
            default:
                return "Unknown";
        }
    }
}
