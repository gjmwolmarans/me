@if (Items.Any())
{
    <h3>
        Roles @if (Items.Any(r => r.IsSelected)) {<FluentIcon OnClick="ClearSelection" Value="@(new Icons.Regular.Size24.FilterDismiss())" /> }
    </h3>
    <SfChip @ref="_chip" Selection="SelectionType.Multiple">
        <ChipEvents OnClick="@OnClick"></ChipEvents>
        <ChipItems>
            @foreach (var role in Items.OrderByDescending(r => r.WeightedExperience))
            {
                <ChipItem Text="@role.Title" CssClass="@(role.IsHighlighted ? "e-primary" : "")"></ChipItem>
            }
        </ChipItems>
    </SfChip>
}

@code {
    [Parameter] public IEnumerable<Role> Items { get; set; } = Enumerable.Empty<Role>();
    [Parameter] public EventCallback<IEnumerable<Role>> ItemsChanged { get; set; }

    public SfChip? _chip { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task OnClick(ChipEventArgs args)
    {
        var role = Items.FirstOrDefault(r => r.Title == args.Text);

        if (role != null)
        {
            role.IsSelected = !role.IsSelected;
            await ItemsChanged.InvokeAsync(Items);
            ResetSelection();
        }
    }

    public void ResetSelection()
    {
        _chip?.SelectChips(Items.Where(r => r.IsSelected).Select(r => r.Title).ToArray());
    }

    public async Task ClearSelection()
    {
        _chip.SelectedChips = Array.Empty<string>();
        Items.Where(r => r.IsSelected).ToList().ForEach(r => r.IsSelected = false);
        await ItemsChanged.InvokeAsync(Items);
    }
}