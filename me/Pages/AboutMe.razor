@page "/"

@using System.Collections.ObjectModel
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Spinner

@inject IExcelFileService ExcelFileService

<PageTitle>gjmwolmarans.me | About Me</PageTitle>

<FluentStack Orientation="Orientation.Vertical">
    <h1>Hello, world!</h1>
    <MarkdownView Content="@AboutMarkdown" />
</FluentStack>

<h2>Competency Matrix</h2>

<div style="width: 95vw; height: auto; overflow-y: hidden;">
    <iframe width="100%" height="680" frameborder="0" scrolling="no"
        src="https://onedrive.live.com/embed?resid=F9480B74B852B3B7%21251307&authkey=%21ALWOWl3ShAlVT70&em=2&wdAllowInteractivity=False&Item=ClusterExperience&wdDownloadButton=True&wdInConfigurator=True&wdInConfigurator=True&edesNext=false&resen=false&ed1JS=false"></iframe>
</div>

<FluentGrid>
    <FluentGridItem sm="12" md="6" lg="3">
        <XPCounter TotalXP="@TotalXP" />
    </FluentGridItem>
    <FluentGridItem sm="12" md="6" lg="3">
        <ChipHelp />
    </FluentGridItem>
    <FluentGridItem sm="12" md="12" lg="6">
        <RoleList @bind-Items="@Data.Roles" />
    </FluentGridItem>
    <FluentGridItem sm="12" md="12" lg="12">
        <TagList @bind-Items="@Data.Tags" @bind-IsLoading="@_isLoading" />
    </FluentGridItem>
    <FluentGridItem sm="12" md="12" lg="12">
        <ResourceTypeList @bind-Items="@Data.ResourceTypes" />
    </FluentGridItem>
    <FluentGridItem sm="12" md="12" lg="12">
        <ResourceList Items="@FilteredResources.OrderByDescending(r => r.Id)" />
    </FluentGridItem>
    <SfSpinner @bind-Visible="@_isLoading" />
</FluentGrid>

@code {
    Data Data { get; set; } = new();
    string AboutMarkdown { get; set; } = null;

    [Inject]
    HttpClient Http { get; set; }
    private bool _isLoading { get; set; }

    private double _totalXP = default;
    public double TotalXP
    {
        get
        {
            if (_totalXP == default)
            {
                _totalXP = Data.ResourceTags.Sum(t => t.WeightedExperience);
            }
            var selectedResourceTypes = Data.ResourceTypes.Where(rt => rt.IsSelected).Select(rt => rt.Title);
            var highlightedTags = Data.Tags.Where(t => t.IsHighlighted);
            return highlightedTags.Any() || selectedResourceTypes.Any()
            ? FilteredResources
            .SelectMany(r => r.ResourceTags)
            .Where(rt => (!highlightedTags.Any() || highlightedTags.Contains(rt.Tag))
            || (!selectedResourceTypes.Any() || selectedResourceTypes.Contains(rt.Resource.TypeId)))
            .Sum(t => t.WeightedExperience)
            : _totalXP;
        }
    }

    IEnumerable<Resource> FilteredResources
    {
        get
        {
            var anyTags = Data.Tags.Any(t => t.IsHighlighted);
            var anyResourceTypes = Data.ResourceTypes.Any(rt => rt.IsSelected);
            return anyTags || anyResourceTypes
            ? Data.Resources.Where(r => (!anyTags || r.ResourceTags.Select(r => r.Tag).Any(t => t.IsHighlighted))
            && (!anyResourceTypes || r.Type.IsHighlighted))
            : Data.Resources;
        }
    }


    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _isLoading = true;
        AboutMarkdown = await Http.GetStringAsync("ABOUT.md");
        Data = await ExcelFileService.LoadData();
        _isLoading = false;
    }
}
